"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const s3 = require("aws-cdk-lib/aws-s3");
const iam = require("aws-cdk-lib/aws-iam");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class ProxyStack extends cdk.Stack {
    constructor(app, id, props) {
        super(app, id, props);
        // Create S3 Bucket
        const imageBucket = new s3.Bucket(this, 'Bucket', {
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // create Lambda function
        const rekoginitionLambdaFunction = new lambda.Function(this, 'RekFunction', {
            handler: 'rekfunction.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
            environment: {
                'BUCKET_NAME': imageBucket.bucketName,
            }
        });
        // Textract Analyze ID Lambda function
        const textractFunction = new lambda.Function(this, 'Textract Analyze ID', {
            handler: 'textract.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
            environment: {
                'BUCKET_NAME': imageBucket.bucketName,
            }
        });
        // write to S3 Lambda function
        const writeToS3Function = new lambda.Function(this, 'writeToS3Function', {
            handler: 'imageUploader.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
            environment: {
                'BUCKET_NAME': imageBucket.bucketName,
            }
        });
        // get from S3 Lambda function
        const getFromS3Function = new lambda.Function(this, 'getFromS3Function', {
            handler: 'rekfunction.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.join(__dirname, '../lambda')),
            environment: {
                'BUCKET_NAME': imageBucket.bucketName,
            }
        });
        // add Rekognition permissions for Lambda function
        const statement = new iam.PolicyStatement();
        statement.addActions("rekognition:DetectLabels");
        statement.addResources("*");
        rekoginitionLambdaFunction.addToRolePolicy(statement);
        const api = new aws_cdk_lib_1.aws_apigateway.RestApi(this, 'Api');
        const imagesApi = api.root.addResource('images');
        imagesApi.addMethod('POST', new aws_cdk_lib_1.aws_apigateway.LambdaIntegration(textractFunction), {
            operationName: "Textract Extract information"
        });
        imagesApi.addMethod('GET', new aws_cdk_lib_1.aws_apigateway.LambdaIntegration(getFromS3Function), {
            operationName: "Get Image from S3 information"
        });
        imagesApi.addMethod('POST', new aws_cdk_lib_1.aws_apigateway.LambdaIntegration(writeToS3Function), {
            operationName: "Write Image to S3 information"
        });
    }
}
exports.ProxyStack = ProxyStack;
const app = new cdk.App();
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6QywyQ0FBMkM7QUFDM0MsNkJBQTZCO0FBRTdCLDZDQUE0QztBQUU1QyxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsS0FBSztJQUNyQyxZQUFZLEdBQVksRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDeEQsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEIsbUJBQW1CO1FBQ25CLE1BQU0sV0FBVyxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQzlDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87U0FDM0MsQ0FBQyxDQUFDO1FBR0gseUJBQXlCO1FBQ3pCLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDeEUsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUM5RCxXQUFXLEVBQUU7Z0JBQ1QsYUFBYSxFQUFFLFdBQVcsQ0FBQyxVQUFVO2FBQ3hDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsc0NBQXNDO1FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRTtZQUN0RSxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzlELFdBQVcsRUFBRTtnQkFDVCxhQUFhLEVBQUUsV0FBVyxDQUFDLFVBQVU7YUFDeEM7U0FDSixDQUFDLENBQUM7UUFFSCw4QkFBOEI7UUFDOUIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ3JFLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDOUQsV0FBVyxFQUFFO2dCQUNULGFBQWEsRUFBRSxXQUFXLENBQUMsVUFBVTthQUN4QztTQUNKLENBQUMsQ0FBQztRQUVILDhCQUE4QjtRQUM5QixNQUFNLGlCQUFpQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDckUsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUM5RCxXQUFXLEVBQUU7Z0JBQ1QsYUFBYSxFQUFFLFdBQVcsQ0FBQyxVQUFVO2FBQ3hDO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsa0RBQWtEO1FBQ2xELE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzVDLFNBQVMsQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUNqRCxTQUFTLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLDBCQUEwQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUd0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLDRCQUFjLENBQUMsT0FBTyxDQUNsQyxJQUFJLEVBQ0osS0FBSyxDQUNSLENBQUM7UUFFRixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRCxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLDRCQUFjLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUNoRixhQUFhLEVBQUUsOEJBQThCO1NBQ2hELENBQUMsQ0FBQztRQUVILFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksNEJBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQ2hGLGFBQWEsRUFBRSwrQkFBK0I7U0FDakQsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSw0QkFBYyxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDakYsYUFBYSxFQUFFLCtCQUErQjtTQUNqRCxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUF4RUQsZ0NBd0VDO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHthd3NfYXBpZ2F0ZXdheSx9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuXG5leHBvcnQgY2xhc3MgUHJveHlTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgY29uc3RydWN0b3IoYXBwOiBjZGsuQXBwLCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgaWQsIHByb3BzKTtcbiAgICAgICAgLy8gQ3JlYXRlIFMzIEJ1Y2tldFxuICAgICAgICBjb25zdCBpbWFnZUJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgJ0J1Y2tldCcsIHtcbiAgICAgICAgICAgIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gY3JlYXRlIExhbWJkYSBmdW5jdGlvblxuICAgICAgICBjb25zdCByZWtvZ2luaXRpb25MYW1iZGFGdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1Jla0Z1bmN0aW9uJywge1xuICAgICAgICAgICAgaGFuZGxlcjogJ3Jla2Z1bmN0aW9uLmhhbmRsZXInLFxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2xhbWJkYScpKSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgJ0JVQ0tFVF9OQU1FJzogaW1hZ2VCdWNrZXQuYnVja2V0TmFtZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGV4dHJhY3QgQW5hbHl6ZSBJRCBMYW1iZGEgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgdGV4dHJhY3RGdW5jdGlvbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ1RleHRyYWN0IEFuYWx5emUgSUQnLCB7XG4gICAgICAgICAgICBoYW5kbGVyOiAndGV4dHJhY3QuaGFuZGxlcicsXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vbGFtYmRhJykpLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICAnQlVDS0VUX05BTUUnOiBpbWFnZUJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB3cml0ZSB0byBTMyBMYW1iZGEgZnVuY3Rpb25cbiAgICAgICAgY29uc3Qgd3JpdGVUb1MzRnVuY3Rpb24gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICd3cml0ZVRvUzNGdW5jdGlvbicsIHtcbiAgICAgICAgICAgIGhhbmRsZXI6ICdpbWFnZVVwbG9hZGVyLmhhbmRsZXInLFxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2xhbWJkYScpKSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgJ0JVQ0tFVF9OQU1FJzogaW1hZ2VCdWNrZXQuYnVja2V0TmFtZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZ2V0IGZyb20gUzMgTGFtYmRhIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IGdldEZyb21TM0Z1bmN0aW9uID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnZ2V0RnJvbVMzRnVuY3Rpb24nLCB7XG4gICAgICAgICAgICBoYW5kbGVyOiAncmVrZnVuY3Rpb24uaGFuZGxlcicsXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vbGFtYmRhJykpLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICAnQlVDS0VUX05BTUUnOiBpbWFnZUJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gYWRkIFJla29nbml0aW9uIHBlcm1pc3Npb25zIGZvciBMYW1iZGEgZnVuY3Rpb25cbiAgICAgICAgY29uc3Qgc3RhdGVtZW50ID0gbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKTtcbiAgICAgICAgc3RhdGVtZW50LmFkZEFjdGlvbnMoXCJyZWtvZ25pdGlvbjpEZXRlY3RMYWJlbHNcIik7XG4gICAgICAgIHN0YXRlbWVudC5hZGRSZXNvdXJjZXMoXCIqXCIpO1xuICAgICAgICByZWtvZ2luaXRpb25MYW1iZGFGdW5jdGlvbi5hZGRUb1JvbGVQb2xpY3koc3RhdGVtZW50KTtcblxuXG4gICAgICAgIGNvbnN0IGFwaSA9IG5ldyBhd3NfYXBpZ2F0ZXdheS5SZXN0QXBpKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICdBcGknLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGltYWdlc0FwaSA9IGFwaS5yb290LmFkZFJlc291cmNlKCdpbWFnZXMnKTtcbiAgICAgICAgaW1hZ2VzQXBpLmFkZE1ldGhvZCgnUE9TVCcsIG5ldyBhd3NfYXBpZ2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbih0ZXh0cmFjdEZ1bmN0aW9uKSwge1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogXCJUZXh0cmFjdCBFeHRyYWN0IGluZm9ybWF0aW9uXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW1hZ2VzQXBpLmFkZE1ldGhvZCgnR0VUJywgbmV3IGF3c19hcGlnYXRld2F5LkxhbWJkYUludGVncmF0aW9uKGdldEZyb21TM0Z1bmN0aW9uKSwge1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogXCJHZXQgSW1hZ2UgZnJvbSBTMyBpbmZvcm1hdGlvblwiXG4gICAgICAgIH0pO1xuICAgICAgICBpbWFnZXNBcGkuYWRkTWV0aG9kKCdQT1NUJywgbmV3IGF3c19hcGlnYXRld2F5LkxhbWJkYUludGVncmF0aW9uKHdyaXRlVG9TM0Z1bmN0aW9uKSwge1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogXCJXcml0ZSBJbWFnZSB0byBTMyBpbmZvcm1hdGlvblwiXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmFwcC5zeW50aCgpO1xuIl19